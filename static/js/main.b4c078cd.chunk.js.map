{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["currencyName","currencyMinor","Array","prototype","sum","prop","total","i","_len","this","length","CustomTooltip","props","active","_this$props","payload","label","react_default","a","createElement","className","concat","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","population","minor","countryInWorld","countryWithEuro","compareBy","bind","assertThisInitialized","sortBy","_this2","axios","get","then","res","setState","data","map","country","reduce","previousValue","currentValue","countryInTheWorld","key","b","arrayCopy","toConsumableArray","sort","_this$state","dataList","slice","filter","populationData","Year","Value","ee","dataList2","album","console","log","expenseMetrics","d3","d","rollup","v","_ref","slicedToArray","defineProperty","count","entries","style","containerLoader","LineCharts","BarCharts","es6","width","height","margin","top","right","left","bottom","strokeDasharray","tick","App_CustomizedAxisTick","type","interval","position","offset","dataKey","domain","angle","content","App_CustomTooltip","color","stroke","fill","CustomizedAxisTick","_this$props2","x","y","transform","dy","textAnchor","fontSize","display","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVAOIA,EAAe,wBACfC,EAAgB,8BAIpBC,MAAMC,UAAUC,IAAM,SAAUC,GAE9B,IADA,IAAIC,EAAQ,EACHC,EAAI,EAAGC,EAAOC,KAAKC,OAAQH,EAAIC,EAAMD,IAC5CD,GAASG,KAAKF,GAAGF,GAEnB,OAAOC,OAGHK,mLAKF,GAFmBF,KAAKG,MAAhBC,OAEI,KAAAC,EACiBL,KAAKG,MAAxBG,EADED,EACFC,QAASC,EADPF,EACOE,MACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,GAAAC,OAAyBL,EAAzB,MAAAK,OAAmCN,EAAQ,GAAGO,SAKpD,OAAO,YAdiBC,IAAMC,WAkBbC,cACnB,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMG,KACDoB,MAAQ,CACXC,WAAY,GACZC,MAAO,GACPC,eAAgB,EAChBC,gBAAiB,GAEnBV,EAAKW,UAAUC,KAAfX,OAAAY,EAAA,EAAAZ,CAAAD,IACAA,EAAKc,OAAOF,KAAZX,OAAAY,EAAA,EAAAZ,CAAAD,IATiBA,mFAYC,IAAAe,EAAAhC,KAClBiC,IAAMC,IAAI,0HACPC,KAAK,SAAAC,GACJJ,EAAKK,SAAS,CACZb,WAAYY,EAAIE,SAGtBL,IAAMC,IAAI,mIACPC,KAAK,SAAAC,GACJ,IAAIT,EAAkBS,EAAIE,KAAKC,IAAI,SAAUC,GAC3C,MAAiC,SAA1BA,EAAQjD,KACdkD,OAAO,SAAUC,EAAeC,GACjC,OAAOD,EAAgBC,IAErBC,EAAoBR,EAAIE,KAC5BN,EAAKK,SAAS,CACZZ,MAAOW,EAAIE,KACXX,gBAAiBA,EACjBD,eAAgBkB,EAAkB3C,SAEpC+B,EAAKD,OAAOxC,uCAIRsD,GACR,OAAO,SAAUpC,EAAGqC,GAClB,OAAIrC,EAAEoC,GAAOC,EAAED,IAAc,EACzBpC,EAAEoC,GAAOC,EAAED,GAAa,EACrB,kCAIJA,GACL,IAAIE,EAAS7B,OAAA8B,EAAA,EAAA9B,CAAOlB,KAAKuB,MAAME,OAC/BsB,EAAUE,KAAKjD,KAAK4B,UAAUiB,IAC9B7C,KAAKqC,SAAS,CAAEZ,MAAOsB,qCAIhB,IAAAG,EACwDlD,KAAKuB,MAA5DC,EADD0B,EACC1B,WAAYC,EADbyB,EACazB,MAAOE,EADpBuB,EACoBvB,gBAAiBD,EADrCwB,EACqCxB,eAEtCyB,EAAW3B,EAAWvB,OAAUuB,EAAW4B,MAAM,MAAO,OAC3DC,OAAO,SAACC,EAAgBxD,GACvB,OACEU,EAAAC,EAAAC,cAAA,MAAImC,IAAK/C,GACNwD,EAAeC,KACfD,EAAeE,SAIrBjB,IAAI,SAAAkB,GAAE,OAAIA,IAETjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,iBAEE+C,EAAYjC,EACf4B,OAAO,SAACM,EAAO7D,GACd,OACEU,EAAAC,EAAAC,cAAA,MAAImC,IAAK/C,GACN6D,EAAMnE,GACNmE,EAAMpE,GACNoE,EAAK,aAIXpB,IAAI,SAAAkB,GAAE,OAAIA,IACXG,QAAQC,IAAIH,GACd,IAAII,EAAiBC,MAClBlB,IAAI,SAAUmB,GAAK,OAAOA,EAAEzE,KAC5B0E,OAAO,SAAUC,GAChB,GAAuB,SAApB,CAAC1E,GAA0B,KAAA2E,EAAAjD,OAAAkD,EAAA,EAAAlD,CACX,EADW,GAC3B3B,EAD2B4E,EAAA,GAE5BP,QAAQC,IAAI,eAEd,OAAO3C,OAAAmD,EAAA,EAAAnD,CAAA,CACLoD,MAAOJ,EAAEjE,QACRT,EAAgBuE,IAAOG,EAAG,SAAUF,GAAK,OAAOA,EAAExE,QAGtD+E,QAAQ9C,GAGX,OAFAmC,QAAQC,IAAKC,GAGXtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkB6D,MAAOC,GACtCjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,8BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACgE,EAAD,CAAYpC,KAAMa,KAEpB3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACiE,EAAD,CAAWrC,KAAMwB,KAEnBtD,EAAAC,EAAAC,cAAA,gDAAwCiB,EAAxC,KACAnB,EAAAC,EAAAC,cAAA,oDAA4CgB,EAA5C,eA3GqBZ,IAAMC,WAmHvC,SAAS2D,EAAWvE,GAClB,OACEK,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKxC,KAAMnC,EAAMmC,KAC9CyC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/C3E,EAAAC,EAAAC,cAAA,qBAAmB0E,gBAAgB,QACnC5E,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOS,KAAM7E,EAAAC,EAAAC,cAAC4E,EAAD,MAAwBC,KAAK,WAAWC,SAAS,mBAAmBjF,MAAO,CAAEM,MAAO,QAAS4E,SAAU,oBAAqBC,QAAS,IAAMC,QAAQ,SAChKnF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOY,SAAS,mBAAmBD,KAAK,SAASK,OAAQ,CAAC,OAAQ,QAASrF,MAAO,CAAEM,MAAO,aAAcgF,OAAQ,GAAIJ,SAAU,aAAcC,QAAS,MACtJlF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAUkB,QAAStF,EAAAC,EAAAC,cAACqF,EAAD,QACnBvF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAQtE,QAAS,CAAC,CAAEO,MAAO,6BAA8B0E,KAAM,OAAQS,MAAO,yBAC9ExF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAMW,KAAK,WAAWI,QAAQ,QAAQM,OAAO,aAKnD,SAAStB,EAAUxE,GACjB,OACEK,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAKxC,KAAMnC,EAAMmC,MAC7C9B,EAAAC,EAAAC,cAAA,qBAAmB0E,gBAAgB,QACnC5E,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOS,KAAM7E,EAAAC,EAAAC,cAAC4E,EAAD,MAAwBK,QAAQ,OAC3CnF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAO/D,MAAM,QAAQ6E,QAAS,EAAGD,SAAS,uBAE5CjF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,KACEpE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAO/D,MAAM,wBAAwB6E,OAAQ,EAAGG,OAAQ,GAAIJ,SAAS,gBAEvEjF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAUkB,QAAStF,EAAAC,EAAAC,cAACqF,EAAD,QACnBvF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAQtE,QAAS,CAAC,CAAEO,MAAO,wBAAyB0E,KAAM,SAAUS,MAAO,yBAC3ExF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAKe,QAAQ,oCAAoCO,KAAK,iBAKtDC,mLACK,IAAAC,EAC2BpG,KAAKG,MAA/BkG,EADDD,EACCC,EAAGC,EADJF,EACIE,EAAWhG,GADf8F,EACOH,OADPG,EACe9F,SAEtB,OACEE,EAAAC,EAAAC,cAAA,KAAG6F,UAAS,aAAA3F,OAAeyF,EAAf,KAAAzF,OAAoB0F,EAApB,MACV9F,EAAAC,EAAAC,cAAA,QAAM2F,EAAG,EAAGC,EAAG,EAAGE,GAAI,EAAGC,WAAW,MAAMP,KAAK,OAAOQ,SAAS,OAAOH,UAAU,eAAejG,EAAQO,eAN9EC,IAAMC,WAYjC0D,EAAkB,CACtBkC,QAAS,OACTC,eAAgB,UC1LEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3G,EAAAC,EAAAC,cAAC0G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtF,KAAK,SAAAuF,GACjCA,EAAaC","file":"static/js/main.b4c078cd.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { BarChart, LineChart, Line, Tooltip, Legend, XAxis, YAxis, Bar, Label, Surface, Symbols } from 'recharts';\nimport './Styles/main.css';\nimport * as d3 from \"d3\";\nimport { OverlayTrigger, Popover } from \"react-bootstrap\";\n\nlet currencyName = \"ISO4217-currency_name\";\nlet currencyMinor = \"ISO4217-currency_minor_unit\";\nlet continent = \"Continent\";\nlet value = \"Value\";\n\nArray.prototype.sum = function (prop) {\n  var total = 0\n  for (var i = 0, _len = this.length; i < _len; i++) {\n    total += this[i][prop]\n  }\n  return total\n}\n\nclass CustomTooltip extends React.Component{\n\n  render() {\n    const { active } = this.props;\n\n    if (active) {\n      const { payload, label } = this.props;\n      return (\n        <div className=\"custom-tooltip\">\n          <p className=\"label\">{`${label}: ${payload[0].value}`}</p>\n        </div>\n      );\n    }\n\n    return null;\n  }\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      population: [],\n      minor: [],\n      countryInWorld: 0,\n      countryWithEuro: 0,\n    }\n    this.compareBy.bind(this);\n    this.sortBy.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('https://pkgstore.datahub.io/core/population/population_json/data/43d34c2353cbd16a0aa8cadfb193af05/population_json.json')\n      .then(res => {\n        this.setState({\n          population: res.data,\n        })\n      })\n    axios.get('https://pkgstore.datahub.io/core/country-codes/country-codes_json/data/471a2e653140ecdd7243cdcacfd66608/country-codes_json.json')\n      .then(res => {\n        let countryWithEuro = res.data.map(function (country) {\n          return country[currencyName] === \"Euro\"\n        }).reduce(function (previousValue, currentValue) {\n          return previousValue + currentValue\n        });\n        let countryInTheWorld = res.data;\n        this.setState({\n          minor: res.data,\n          countryWithEuro: countryWithEuro,\n          countryInWorld: countryInTheWorld.length,\n        });\n        this.sortBy(currencyName);\n      })\n  }\n\n  compareBy(key) {\n    return function (a, b) {\n      if (a[key] < b[key]) return -1;\n      if (a[key] > b[key]) return 1;\n      return 0;\n    };\n  }\n\n  sortBy(key) {\n    let arrayCopy = [...this.state.minor];\n    arrayCopy.sort(this.compareBy(key));\n    this.setState({ minor: arrayCopy });\n  }\n\n \n  render() {\n    const { population, minor, countryWithEuro, countryInWorld } = this.state;\n\n    const dataList = population.length ? (population.slice(11449, 11506)\n      .filter((populationData, i) => {\n        return (\n          <ul key={i}>\n            {populationData.Year}\n            {populationData.Value}\n          </ul>\n        );\n      })\n      .map(ee => ee)\n    ) : (\n        <div className=\"center\">No data yet! </div>\n      )\n    const dataList2 = minor\n      .filter((album, i) => {\n        return (\n          <ul key={i}>\n            {album[currencyMinor]}\n            {album[currencyName]}\n            {album[continent]}\n          </ul>\n        );\n      })\n      .map(ee => ee)\n      console.log(dataList2);\n    let expenseMetrics = d3.nest()\n      .key(function (d) { return d[currencyName]; })\n      .rollup(function (v) {\n        if([currencyMinor] === 'null'){\n          [currencyName] = 0\n          console.log('dzia≈Ça');\n        }\n        return {\n          count: v.length,\n          [currencyMinor]: d3.sum(v, function (d) { return d[currencyMinor]; })          \n        };\n      })\n      .entries(minor);\n    console.log((expenseMetrics));\n\n    return (\n      <div className=\"containerLoader\" style={containerLoader}>\n        <div className=\"countryd z-depth-0 project-summary thumb\">\n          <div className=\"countryd-content grey-text text-darken-3 containerPost\">\n            <div className=\"title\"> Task charts with data API</div>\n            <div className=\"chartsContainer\">\n              <LineCharts data={dataList} />\n            </div>\n            <div className=\"chartsContainer\">\n              <BarCharts data={expenseMetrics} />\n            </div>\n            <div>Countries with the euro currency: {countryWithEuro} </div>\n            <div>The number of countries in the world: {countryInWorld} </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction LineCharts(props) {\n  return (\n    <LineChart width={900} height={400} data={props.data}\n      margin={{ top: 5, right: 30, left: 50, bottom: 5 }}>\n      <countrytesianGrid strokeDasharray=\"3 3\" />\n      <XAxis tick={<CustomizedAxisTick />} type=\"category\" interval=\"preserveStartEnd\" label={{ value: 'Years', position: 'insideBottomRight', offset: -10 }} dataKey=\"Year\" />\n      <YAxis interval=\"preserveStartEnd\" type=\"number\" domain={['auto', 'auto']} label={{ value: 'Population', angle: -90, position: 'insideLeft', offset: -40 }} />\n      <Tooltip  content={<CustomTooltip/>}/>\n      <Legend payload={[{ value: 'Population trend in Poland', type: 'line', color: 'rgb(136, 132, 216)' }]} />\n      <Line type=\"monotone\" dataKey=\"Value\" stroke=\"#8884d8\" />\n    </LineChart>\n  )\n}\n\nfunction BarCharts(props) {\n  return (\n    <BarChart width={900} height={400} data={props.data}>\n      <countrytesianGrid strokeDasharray=\"3 3\" />\n      <XAxis tick={<CustomizedAxisTick />} dataKey=\"key\" >\n        <Label value=\"Minor\" offset={-5} position=\"insideBottomRight\" />\n      </XAxis>\n      <YAxis >\n        <Label value=\"Currency distribution\" offset={0} angle={-90} position=\"insideLeft\" />\n      </YAxis>\n      <Tooltip  content={<CustomTooltip/>}/>\n      <Legend payload={[{ value: 'Currency distribution', type: 'square', color: 'rgb(130, 202, 157)' }]} />\n      <Bar dataKey=\"value.ISO4217-currency_minor_unit\" fill=\"#82ca9d\" />\n    </BarChart>\n  )\n}\n\nclass CustomizedAxisTick extends React.Component {\n  render() {\n    const { x, y, stroke, payload } = this.props;\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={4} textAnchor=\"end\" fill=\"#666\" fontSize=\"12px\" transform=\"rotate(-25)\">{payload.value}</text>\n      </g>\n    );\n  }\n}\n\nconst containerLoader = {\n  display: 'flex',\n  justifyContent: 'center',\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}