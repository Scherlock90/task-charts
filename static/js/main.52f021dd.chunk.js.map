{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","year","_this2","axios","get","then","res","console","log","data","slice","setState","dataList","length","filter","album","i","react_default","a","createElement","Year","Value","map","ee","className","style","containerLoader","DataThumb","React","Component","es6","width","height","margin","top","right","left","bottom","strokeDasharray","label","value","position","offset","dataKey","angle","type","stroke","display","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAQqBA,sBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAHSR,mFAOC,IAAAS,EAAAN,KAClBO,IAAMC,IAAI,0HACPC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,KAAKC,MAAM,MAAO,QAClCR,EAAKS,SAAS,CACZV,KAAMK,EAAIG,0CAIT,IACCR,EAASL,KAAKI,MAAdC,KACFW,EAAWX,EAAKY,OAAUZ,EAAKS,MAAM,MAAO,OAAOI,OAAO,SAACC,EAAOC,GACtE,OACEC,EAAAC,EAAAC,cAAA,UACGJ,EAAMK,KACNL,EAAMM,SAGVC,IAAI,SAAAC,GAAE,OAAIA,IAETN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UAAf,iBAEJ,OACEP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBAAkBC,MAAOC,GACtCT,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wCACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sDACbP,EAAAC,EAAAC,cAACQ,EAAD,CAAWlB,KAAMG,cAlCIgB,IAAMC,YA0CvC,SAASF,EAAUnC,GACjB,OACEyB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKvB,KAAMjB,EAAMiB,KAC9CwB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/CpB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAeQ,gBAAgB,QAC/BrB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,MAAO,CAAEC,MAAO,QAASC,SAAU,oBAAqBC,QAAS,IAAMC,QAAQ,SACtF1B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,MAAO,CAAEC,MAAO,aAAcI,OAAQ,GAAIH,SAAU,aAAcC,QAAS,MAClFzB,EAAAC,EAAAC,cAACW,EAAA,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAA,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMe,KAAK,WAAWF,QAAQ,QAAQG,OAAO,aAKnD,IAAMpB,EAAkB,CACtBqB,QAAS,OACTC,eAAgB,UCtDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.52f021dd.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, CartesianGrid, Tooltip, Legend, XAxis, YAxis } from 'recharts';\nimport './Styles/main.css'\n\nlet conutrCode = \"Country Code\";\nlet countryName = \"Country Name\";\nlet year = \"Year\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {      \n      year: []      \n    }\n  }\n  \n  componentDidMount() {\n    axios.get('https://pkgstore.datahub.io/core/population/population_json/data/43d34c2353cbd16a0aa8cadfb193af05/population_json.json')\n      .then(res => {\n        console.log(res.data.slice(11449, 11505));\n        this.setState({\n          year: res.data,\n        })\n      })\n  }\n  render() {\n    const { year } = this.state;    \n    const dataList = year.length ? (year.slice(11449, 11506).filter((album, i) => {\n      return (\n        <ul>\n          {album.Year}\n          {album.Value}\n        </ul>\n      );\n    }).map(ee => ee)\n    ) : (\n        <div className=\"center\">No data yet! </div>\n    )\n    return (\n      <div className=\"containerLoader\" style={containerLoader}>\n        <div className=\"card z-depth-0 project-summary thumb\">\n          <div className=\"card-content grey-text text-darken-3 containerPost\">\n            <DataThumb data={dataList} />\n          </div>          \n        </div>\n      </div>\n    )\n  }\n}\n\nfunction DataThumb(props) {\n  return (\n    <LineChart width={900} height={250} data={props.data}\n      margin={{ top: 5, right: 30, left: 50, bottom: 5 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis label={{ value: 'Years', position: 'insideBottomRight', offset: -10 }} dataKey=\"Year\" />\n      <YAxis label={{ value: 'Population', angle: -90, position: 'insideLeft', offset: -20 }} />\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"Value\" stroke=\"#8884d8\" />\n    </LineChart>\n  )\n}\n\nconst containerLoader = {\n  display: 'flex',\n  justifyContent: 'center',\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}